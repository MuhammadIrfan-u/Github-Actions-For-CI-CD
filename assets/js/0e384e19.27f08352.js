"use strict";(globalThis.webpackChunkmy_docs=globalThis.webpackChunkmy_docs||[]).push([[3976],{2053:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"intro","title":"Introduction to GitHub Actions CI/CD Pipeline","description":"Automating your project workflows is one of the most powerful ways to ensure speed, consistency, and reliability in modern software development.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/Github-Actions-For-CI-CD/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Tutorial - Basics","permalink":"/Github-Actions-For-CI-CD/docs/category/tutorial---basics"}}');var s=t(4848),i=t(8453);const r={sidebar_position:1},a="Introduction to GitHub Actions CI/CD Pipeline",l={},c=[{value:"\ud83d\ude80 What is CI/CD?",id:"-what-is-cicd",level:2},{value:"\u2699\ufe0f Setting Up the Workflow",id:"\ufe0f-setting-up-the-workflow",level:2},{value:"\ud83e\uddfe Full Workflow Example",id:"-full-workflow-example",level:2}];function u(n){const e={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"introduction-to-github-actions-cicd-pipeline",children:"Introduction to GitHub Actions CI/CD Pipeline"})}),"\n",(0,s.jsxs)(e.p,{children:["Automating your project workflows is one of the most powerful ways to ensure speed, consistency, and reliability in modern software development.",(0,s.jsx)(e.br,{}),"\n","With ",(0,s.jsx)(e.strong,{children:"GitHub Actions"}),", you can build a complete ",(0,s.jsx)(e.strong,{children:"Continuous Integration (CI)"})," and ",(0,s.jsx)(e.strong,{children:"Continuous Deployment (CD)"})," pipeline for your Node.js applications \u2014 enabling automatic testing, dependency verification, and deployment."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-what-is-cicd",children:"\ud83d\ude80 What is CI/CD?"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Continuous Integration (CI)"})," ensures that every new commit or pull request is automatically tested and verified before merging.",(0,s.jsx)(e.br,{}),"\n",(0,s.jsx)(e.strong,{children:"Continuous Deployment (CD)"})," takes it further by automatically deploying your application or documentation once the CI process succeeds."]}),"\n",(0,s.jsx)(e.p,{children:"Together, they eliminate manual steps, reduce human errors, and keep your application always ready for production."}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"\ufe0f-setting-up-the-workflow",children:"\u2699\ufe0f Setting Up the Workflow"}),"\n",(0,s.jsxs)(e.p,{children:["GitHub Actions workflows are written in ",(0,s.jsx)(e.strong,{children:"YAML"})," files placed inside:"]}),"\n",(0,s.jsx)(e.p,{children:".github/workflows/"}),"\n",(0,s.jsx)(e.p,{children:"less\nCopy code"}),"\n",(0,s.jsxs)(e.p,{children:["Each workflow defines ",(0,s.jsx)(e.strong,{children:"when"})," and ",(0,s.jsx)(e.strong,{children:"how"})," your automation should run."]}),"\n",(0,s.jsx)(e.p,{children:"Below is the YAML code for a scheduled testing workflow."}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-full-workflow-example",children:"\ud83e\uddfe Full Workflow Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'name: schedule Automated Tests\n\non:\n  schedule:\n    - cron: "0 0 * * *"\n  workflow_dispatch:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests with logging\n        run: |\n          npm test -- --verbose > test-results.log 2>&1 || true\n\n       - name: Upload test logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: daily-test-logs\n          path: test-results.log\n\n---\n\n## \ud83e\udded Understanding the Workflow (Breakpoint)\n\nfollowing sections break down the above YAML file into smaller parts for easier understanding.\n\n---\n\n## \ud83e\udde9 Workflow Overview\n\n```yaml\nname: schedule Automated Tests\n\n\n\u23f0 Trigger Conditions\nyaml\nCopy code\non:\n  schedule:\n    - cron: "0 0 * * *"\n  workflow_dispatch:\nschedule \u2014 Runs automatically based on the cron syntax.\n\n"0 0 * * *" means it runs every day at midnight (UTC).\n\nworkflow_dispatch \u2014 Allows manual triggering of the workflow from GitHub\u2019s \u201cActions\u201d tab.\n\n\u2699\ufe0f Job Configuration\nyaml\nCopy code\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\njobs define what actions will be performed.\n\nrun-tests is the name of the job.\n\nruns-on: ubuntu-latest specifies that it will execute on the latest version of Ubuntu Linux.\n\n\ud83d\udd28 Steps Explained\nEach step inside the job describes a single action in the testing process.\n\n1. Checkout Repository\nyaml\nCopy code\n- name: Checkout repository\n  uses: actions/checkout@v3\nThis pulls your repository\u2019s latest code into the runner so the workflow can access and test it.\n\n2. Set Up Node.js\nyaml\nCopy code\n- name: Set up Node.js\n  uses: actions/setup-node@v3\n  with:\n    node-version: 20\nThis installs Node.js version 20, allowing the workflow to run JavaScript/TypeScript code and npm commands.\n\n3. Install Dependencies\nyaml\nCopy code\n- name: Install dependencies\n  run: npm install\nInstalls all required packages defined in your package.json file.\n\n4. Run Tests with Logging\nyaml\nCopy code\n- name: Run tests with logging\n  run: |\n    npm test -- --verbose > test-results.log 2>&1 || true\nRuns your test suite using npm test.\n\nThe --verbose flag provides detailed test output.\n\nOutput is redirected into a log file named test-results.log.\n\nThe || true ensures that the workflow continues even if tests fail (so logs can still be uploaded).\n\n5. Upload Test Logs\nyaml\nCopy code\n- name: Upload test logs\n  uses: actions/upload-artifact@v4\n  with:\n    name: daily-test-logs\n    path: test-results.log\nUploads the test log file as an artifact to GitHub.\n\nYou can later download it from the workflow\u2019s summary page.\n\nThe artifact will be named daily-test-logs.\n'})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(n){const e=o.useContext(i);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);